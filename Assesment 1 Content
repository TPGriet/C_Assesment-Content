1. Chintu has AA units of solid and BB units of liquid. He combines them to create a mixture.
What kind of mixture does Chintu produce: a solution, a solid, or a liquid? 
A mixture is called a:
1) A solution if A>0A>0 and B>0B>0,
2) A solid if B=0B=0, or
3) A liquid if A=0A=0.

TEST CASES:
------------------
case=t1
input=
10 5
output=
Solution

case=t2
input=
0 3
output=
Liquid

case=t3
input=
3 0
output=
Solid

PROGRAM:
----------------
#include <stdio.h>
int main()
{
    int A, B;
    //printf("Enter values of A and B");
    scanf("%d %d",&A, &B);
    if(A>0 && B>0)
      printf("Solution");
    else if( A>0 && B==0)
       printf("Solid");
    else if(A==0 && B>0)
      printf("Liquid");
      return 0;
}

2. Write a program to find the grace marks for a student using switch.The user should enter the class obtained by the student and the
number of subjects he has failed in. Use the following logic:
1.If the student gets first class and the number of subjects he failed in is greater than 3, then he does not get any grace.
Otherwise the grace is of 5 marks per subject.
2.If the student gets second class and the number of subjects he failed in is greater than 2, then he does not get any grace.
Otherwise the grace is of 4 marks per subject.
3. If the student gets third class and the number of subjects he failed in is greater than 1, then he does not get any grace.
Otherwise the grace is of 5 marks.

Testcase example:
-----------------
case=t1
input=2 2
output=eligible for 4 grace marks per subject

case=t1
input=3 2
output=not eligible for grace marks

case=t3
input=5 1
output=Wrong choice. Please enter valid class

case=t4
input=3 1
output=eligible for 3 grace marks per subject

case=t5
input=1 2
output=eligible for 5 grace marks per subject
PROGRAM:
----------------
#include<stdio.h>
int main()
{
    int c,f;
    scanf("%d %d",&c,&f);
    switch(c)
    {
        case 1:if(f>3)
        printf("not eligible for grace marks");
        else
        printf("eligible for 5 grace marks per subject");
        break;
        case 2:if(f>2)
               printf("not eligible for grace marks");
               else
            printf("eligible for 4 grace marks per subject");
            break;
        case 3:if(f>1)
               printf("not eligible for grace marks");
        else
               printf("eligible for 3 grace marks per subject");
               break;
        default:
        printf("Wrong choice. Please enter valid class");
        
    }
}

3. At the security checkpoint, airport security personnel have seized a number of traveller's belongings. (N)
Everything has been thrown into a big box (array).
Each product carries a specific level of risk[0,1,2]. 
The risk severity of the items in this case is represented by an array[] of N integer values. 
Sorting the elements in the array according to the degrees of danger is the task at hand. Between 0 and 2 are the risk values.

 Test case Example :
-------------------
case=t1
input=7
0 1 2 0 1 1 2
output=0 0 1 1 1 2 2 

case=t2
Fail message="Guys this is hidden test case.. Check your program correctly to match it!!"
input=8
1 1 0 2 2 1 0 0
output=0 0 0 1 1 1 2 2 

PROGRAM:
----------------
#include<stdio.h>
int main()
{
          int n;
          scanf("%d",&n);
        int arr[n];
        for(int i = 0; i < n; i++)
            scanf("%d",&arr[i]);
        int countZero = 0, countOne = 0, countTwo = 0;
        for(int i = 0; i < n; i++)
        { 
            if(arr[i]==0)
                countZero++;
            else if(arr[i]==1)
                countOne++;
            else if(arr[i]==2)
                countTwo++;
        }
        int j = 0;
        while(countZero > 0)
        {
            arr[j++] = 0;
            countZero--;
        }
        while(countOne > 0)
        {
            arr[j++] = 1;
            countOne--;
        }
        while(countTwo > 0)
        {
            arr[j++] = 2;
            countTwo--;
        }
        for(int i = 0; i < n; i++)
          printf("%d ",arr[i]);
    }
4. There are n houses built in a line, each of which contains some cash in it.
A thief is going to steal the maximal cash of these houses,
but he can't steal in two adjacent houses because the owner of the stolen houses will tell his two neighbours left and right side.
Find the maximum stolen value?
Input format:
-----------------
First an integer n, denoting how many houses are there.
Then n space separated integers denoting the cash for the n houses.
Output Format:
An integer denoting the maximum value possible to steal. 

Test case example:
-----------------
case=t1
input=6
10 20 50 50 100 200
output=270

case=t2
input=7
0 2 1 5 3 6 1
output=13

PROGRAM:
-----------------
#include <stdio.h>
int main()
{
    int n;
    scanf("%d",&n);
    int a[n],evenSum=0,oddSum=0;
    for(int i=0;i<n;i++)
    {   scanf("%d",&a[i]);
        if(i%2==0)
          evenSum=evenSum+a[i];
        else
          oddSum=oddSum+a[i];
        
    }
    if(evenSum>oddSum)
       printf("%d",evenSum);
    else
      printf("%d",oddSum);
      
      return(0);
}

5.  Write a c program to generate all possible combinations of numbers 3, 4 and 5.

Test Case:
------------------
input= 
Output=345 354 435 453 534 543 are all the possible combinations of 3,4 and 5.

PROGRAM:
---------------
#include <stdio.h>

int main()
{
    int i, j, k;

    // Nested for loops for generating combinations
    for (i = 3; i <= 5; i++) {
        for (j = 3; j <= 5; j++) {
            for (k = 3; k <=5; k++) {
                if(i==j || i==k || j==k)
				continue;
                printf("%d%d%d ", i, j, k);
            }
        }
    }
printf("are all the possible combinations of 3, 4 and 5.");
    return 0;
}

6. Assume a hall with the capability of n seats and every occupied seat is represented with 1 and the empty seat with 0. 
Write a C program to count the total number of occupied and empty seats.
Input format: Read a string of binary values 0's and 1's

Test cases:
------------
case=t1
input=
100101001110
output= Occupied=6 Empty=6

case=t2
input=0100101011
output=Occupied=5 Empty=5

PROGRAM:
-------------
#include <stdio.h>

int main() {
    char binaryNumber[100];
    int zerosCount = 0;
    int onesCount = 0;

   // printf("Enter a binary number: ");
    scanf("%s", binaryNumber);

    // Iterate through each character in the binary number
    for (int i = 0; binaryNumber[i] != '\0'; i++) {
        if (binaryNumber[i] == '0') {
            zerosCount++;
        } else if (binaryNumber[i] == '1') {
            onesCount++;
        }
    }

    printf("Occupied=%d Empty=%d",onesCount,zerosCount);


    return 0;
}

7. A positive integer d is said to be a factor of another positive integer N if when N is divided by d, 
the remainder obtained is zero. For example, for number 12, there are 6 factors 1, 2, 3, 4, 6, 12. 
Every positive integer k has at least two factors, 1 and the number k itself.
Given two positive integers N and k, your job is to print the kth largest factor of N.

TESTCASES:
---------------------
case=t1
input=
20 3
output=The 3th largest factor of 20 is 5

case=t2
input=20 4
output=The 4th largest factor of 20 is 4

case=t3
input=9 5
output="The number 9 does not have 5 factors"

PROGRAM:
----------------------
#include <stdio.h>

int main() 
{
    int N, k;
    int factorCount = 0;

    //printf("Enter a positive integer N: ");
    scanf("%d %d", &N,&k);

    // Find and print the kth largest factor
    for (int i = N; i >= 1; i--) 
    {
        if (N % i == 0)
        {
            factorCount++;

            if (factorCount == k) 
            {
        printf("The %dth largest factor of %d is %d", k, N, i);
                break;
            }
        }
    }

    if (factorCount < k)
    {
        printf("The number %d does not have %d factors\n", N, k);
    }

    return 0;
}

8. Amicable numbers are two different natural numbers related in such a 
way that the sum of the proper divisors of each is equal to the other number.
example: 220 and 284 are amicable numbers:
because The factors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55, and 110 which is equal to 284.
while the factors of 284 are 1, 2, 4, 71, and 142, which is equal to 220.

Write a c program to check if two given numbers are amicable numbers or not.

Test case example:
--------------------
case=t1
input=220 284
output="(220,284) are amicable pairs

case=t2
input=1184 1210
output="(1184,1210) are amicable pairs

case=t3
input=6 28
output="(6,28) are not amicable pairs

PROGRAM:
----------------
#include <stdio.h>
int getDivisorsSum(int num){    
    int sum = 0;
    
    for(int i = 1; i < num; i++)
    {
        if(num % i == 0)
            sum = sum + i;
    }
    return sum;
}

int main ()
{
    int num1,num2;
    scanf("%d%d",&num1,&num2);
    int sum1 = getDivisorsSum(num1);
    int sum2 = getDivisorsSum(num2);
    if(sum1==num2 && sum2==num1)
        printf("(%d, %d) are amicable pairs", num1, num2);
    else
        printf("(%d, %d) are not amicable pairs", num1, num2);

}

9. The " String triple trouble" problem involves combining three strings, taking one character alternately from each string.
Write a C program to implement the same.

Constraints:Read Strings with spaces and Make sure Strings Length < 10

Test Case Example:
---------------------------------
case=t1
input=virat kohli
RCB
The Goat
output=vRTiChrBea tg okaothli

case=t2
input=12 34
56 78
arun
output=15a26r  u37n48

PROGRAM:
--------------------
#include <stdio.h>
#include <string.h>
void triple(const char* str1, const char* str2, const char* str3)
{
    int len1 = strlen(str1);
    int len2 = strlen(str2);
    int len3 = strlen(str3);
    int len = len1 > len2 ? len1 : len2;
    len = len > len3 ? len : len3;

    for (int i = 0; i < len; i++)
    {
        if (i < len1)
            printf("%c", str1[i]);
        if (i < len2)
            printf("%c", str2[i]);
        if (i < len3)
            printf("%c", str3[i]);
    }
    printf("\n");
}

int main() 
{
    char str1[20];
    char str2[20];
    char str3[20];
    fgets(str1, sizeof(str1), stdin);
    str1[strcspn(str1, "\n")] = '\0';  
    fgets(str2, sizeof(str2), stdin);
    str2[strcspn(str2, "\n")] = '\0';  
    fgets(str3, sizeof(str3), stdin);
    str3[strcspn(str3, "\n")] = '\0';  

    triple(str1, str2, str3);

    return 0;
}

11. John loves collecting rare coins. He recently acquired a new collection of coins and
wanted to determine the second smallest coin in the collection.

Write a C program to assist John in finding the second smallest coin in his collection.
The program should prompt John to enter the total number of coins in his collection
and then ask for the value of each coin. After analyzing the collection,
the program should display the value of the second smallest coin.

TEST CASE EXAMPLE:
case=t1
input=7
1 4 3 2 1 5 6
output="second smallest coin is 2"

case=t2
input=5
10 34 56 23 12
output="second smallest coin is 12"

case=t3
input=5
101 45 235 560 600
output="No second smallest coin found"

PROGRAM:
----------------------
#include <stdio.h>
#include <limits.h>

int findSecondSmallest(int arr[], int size) {
    int smallest = 101;
    int secondSmallest = 101;

    for (int i = 0; i < size; i++) {
        if (arr[i] < smallest) {
            secondSmallest = smallest;
            smallest = arr[i];
        } else if (arr[i] < secondSmallest && arr[i] != smallest) {
            secondSmallest = arr[i];
        }
    }

    return secondSmallest;
}

int main() {
    int size;
   // printf("Enter the size of the array: ");
    scanf("%d", &size);

    int arr[size];
    //printf("Enter the elements of the array: ");
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    int secondSmallest = findSecondSmallest(arr, size);
    if (secondSmallest != 101) {
        printf("second smallest coin is %d\n", secondSmallest);
    } else {
        printf("No second smallest coin found\n");
    }

    return 0;
}

12.The idea of Kadane's algorithm is, Given an array of integers, 
the task is to find the maximum subarray sum possible of all the non-empty subarrays.
Example:
input=6
-1 2 2 4 -3 -5
output=maximum contigous subarray sum is 8

Explanation: Subarray [2,2,4] is the maximum contiguous subarray with sum 8.

Write a c program to implement the same.
TEST CASE:
----------------------
case=t1
input=5
2 -4 3 -1 2
output=maximum contigous subarray sum is  4

case=t1
input=5
1 2 100 -50 -100
output=maximum contigous subarray sum is 103

case=t3
input=8
-3 -4 5 -1 2 -4 6 -1
output=maximum contigous subarray sum is 8

PROGRAM:
--------------------
#include<stdio.h>
int main()
{
    int n;
    scanf("%d",&n);
    int a[n];
    for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
       int cursum=a[0];
       int maxsum=a[0];
       for(int i=1;i<n;i++)
       {
             if(a[i]>a[i]+cursum)
              cursum=a[i];
             else
             cursum=a[i]+cursum;
       
       if(cursum > maxsum)
       {
           maxsum=cursum;
       }
        
    }
    printf("maximum contigous subarray sum is %d",maxsum);
    return 0;
}

13.Print the following pattern   			
Enter the no. of rows: 2
a a
b b
Enter the no. of rows: 3
a a a
b b b
c c c


TEST CASES:
-----------
case=t1
input=2
output=
a a
b b 

case=t2
input=3
output=
a a a
b b b
c c c

case=t3
input=4
output=
a a a a 
b b b b 
c c c c 
d d d d 

PROGRAM:
-----------------------
#include <stdio.h>
int main()
{
    int i,j,n;
    char ch='a';
   // printf("Enter no. of rows");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        printf("%c ",ch);
      ch++;
      printf("\n");    
    }
   return 0;
}
