1. Write a c program to enter a sentence (not more than 100 characters)
   unpack the sentence into 2 words based on the special character @.
TESTCASES:
---------------------
case=t1
input=GRIET TRAINING PROGRAM @ T&P CELL
output=Value in first variable: GRIET TRAINING PROGRAM 
Value in second variable: @ T&P CELL

CASE=t2
fail message="hidden test case"
input=GUNNING FOR@GLORY
output=Value in first variable: GUNNING FOR
Value in second variable: @GLORY

case=t3
input=arunkumarkongi@gmail.com
output=Value in first variable: arunkumarkongi
Value in second variable: @gmail.com

PROGRAM:
----------------------
#include<stdio.h>
#define size 100
int main()
 {
    char ptr[100];
    fgets(ptr,sizeof(ptr),stdin);
    char a[100], b[100];
    char c[100];
    sscanf(ptr, "%[^@] %[^\n]" , a,b);


    printf("Value in first variable: %s",a);
    printf("\nValue in second variable: %s",b);
    return 0;
} 

2.Write a c program to Find a number in a given array which occurs Odd number of times( Note: Rest all numbers appear even times)
    Enter array size followed by array elements.
TESTCASES:
---------------------
case=t1
input=5
1 2 1 1 3
output=Number occuring odd number of times is: 1

case=t2
input=11
10 10 10 10 10 10 40 40 40 40 40
output=Number occuring odd number of times is:40


case=t3
fail message="hidden test case"
input=11
4 4 4 5 5 7 7 7 7 8 8
output=Number occuring odd number of times is: 4

PROGRAM:
--------------------
#include <stdio.h>
 
int findOddCountElem (int *arr1, int n ) 
{
     for (int i = 0; i < n; i++) {
         
        int count = 0;
         
        for (int j = 0; j < n; j++)
        {
            if (arr1[i] == arr1[j])
                count++;
        }
        if (count % 2 != 0)
            return arr1[i];
    }
}
 
int main()
{
    int i;
 int n;
 int arr1[20];
 scanf("%d",&n);
 for(i=0;i<n;i++)
 scanf("%d",&arr1[i]);
 printf("Number occuring odd number of times is:%d", findOddCountElem(arr1, n));
 return 0;
}


  /* int xor = 0;
    for (int i = 0; i < n; i++) 
    {
        xor = xor ^ arr[i];
    }
    return xor;*/

3. An anagram is a word or phrase formed by changing the order of the letters in another word or phrase.
For example, 'dusty' is an anagram of 'study'. 
Write an anagram function to do the same which accepts 2 character strings.

Input format: enter 2 strings separetely(may include spaces)
TESTCASES:
--------------------
case=t1
input=dusty
study
output=The strings are anagrams.

case=t2
input=a gentleman
elegant man
output=The strings are anagrams.

case=t3
input=listen
silent
output=The strings are anagrams.

case=t4
Fail message="not anagram case"
input=griet
college
output=The strings are not anagrams.
PROGRAM:
--------------------
#include <stdio.h>
int anagram(char[], char[]);

int main()
{
  char a[100], b[100];
  fgets(a,sizeof(a),stdin);
  fgets(b,sizeof(b),stdin);

  if(anagram(a, b))
    printf("The strings are anagrams.");
  else
    printf("The strings are not anagrams.");

  return 0;
}

int anagram(char a[], char b[])
{
  int first[26] = {0}, second[26] = {0}, c=0;

  while (a[c] != '\0') 
  {
    first[a[c]-'a']++;
      c++;
  }

  c = 0;
  while (b[c] != '\0') 
  {
    second[b[c]-'a']++;
    c++;
  }

  for (c = 0; c < 26; c++)
  {
    if (first[c] != second[c])
      return 0;
  }
  return 1;
}



/*  int first[26] = {0}, second[26] = {0}, c=0;
while (a[c] != '\0' && a[c] != '\n')
    {
        if (isalpha(a[c]))
            first[tolower(a[c]) - 'a']++;
        else if (isdigit(a[c]))
            first[a[c] - '0' + 26]++;
        c++;
    }*/

4. Find a pair with a given sum. Print all such pairs available in the array (0<n<20).
If no such pairs exist, print error message as "no pair matches given sum"
TESTCASES:
----------------
case=t1
fail message="normal hidden case"
input=5
1 2 3 4 5
5
output=
Pair with given sum is (1, 4)
Pair with given sum is (2, 3)

case=t2
input=6
1 2 3 4 5 6
7
output=Pair with given sum is (1, 6)
Pair with given sum is (2, 5)
Pair with given sum is (3, 4)

case=t3
input=5
10 15 20 80 60
60
output=no pair matches given sum

case=t4
input=
5
1 1 2 2 3
3
output=Pair with given sum is (1, 2)
Pair with given sum is (1, 2)

PROGRAM:
--------------------
#include <stdio.h>
#include <stdbool.h>

int findPairsWithSum(int arr[], int start, int end, int sum, int visited[])
{
    if (start >= end)
        return 0;

    int flag= 0;

    for (int i = start; i < end; i++)
    {
        for (int j = i + 1; j <= end; j++)
        {
            if (arr[i] + arr[j] == sum && !visited[i] && !visited[j])
            {
                printf("Pair with given sum is (%d, %d)\n", arr[i], arr[j]);
                visited[i] = 1;
                visited[j] = 1;
                flag = 1;
            }
        }
    }

   
    return flag;
}

int main()
{
    int n;
    scanf("%d", &n);

    int arr[n];
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }

    int sum;
    printf("Enter the sum: ");
    scanf("%d", &sum);


    int visited[n];
    for (int i = 0; i < n; i++)
    {
        visited[i] = 0;
    }

    int flag = findPairsWithSum(arr, 0, n - 1, sum, visited);

    if (flag==0)
    {
        printf("no pair matches given sum");
    }

    return 0;
}

5. Recursive Digit Sum
We define super digit of an integer x using the following rules:
Given an integer, we need to find the super digit of the integer.
If x has only 1 digit, then its super digit is x.
Otherwise, the super digit of x is equal to the super digit of the sum of the digits of x.
For example, the super digit of 9875 will be calculated as:
Super_digit (9875) 9+8+7+5=29
Super_digit (29) 2+9=11
Super_digit (11) 1+1=2
Super_digit (2) =2
//given the following recursive function

int sum(int sum)
{
    //ur code here
    //function returns an integer value to main function
}

TESTCASES:
-----------------
case=t1
input=4623
output=6

case=t2
input=9875
output=2

case=t3
fail message="hidden"
input=121
output=4

case=t4
fail message="hidden test case"
input=0
output=0

case=t5
input=34567
output=7

PROGRAM:
---------------------
# include <stdio.h>
int sum (int a);
 
int main()
{
    int num, result;
 
    //printf("Enter the number: ");
    scanf("%d", &num);
    
     result=sum(num);
        
    printf("%d", result);
    return 0;
}
 
int sum(int num)
{
      return (num <10 ? num : sum(num %10 + num/10));
}

